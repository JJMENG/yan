<?xml version="1.0" encoding="UTF-8"?>    
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"    
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"    
    xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="    
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd    
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd    
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd 
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd   
       ">
       
    <!-- 启用CGliB -->
    <!-- 
    <aop:aspectj-autoproxy proxy-target-class="true" />   
     -->
           
    <!-- 读取配置文件 -->
    <bean id="placeholderConfig"    
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
        <property name="location">    
            <value>classpath:config/db.properties</value>    
        </property>    
    </bean>
    
    <!-- 配置数据库连接 -->
    <bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource" lazy-init="false">
        <property name="driver" value="${driver}"/>
        <property name="driverUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>
	<!-- 配置sqlSessionFactory -->  
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">    
        <property name="configLocation" value="classpath:sqlmap/sqlMapConfig.xml" />    
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.tstar.portal.model, com.tstar.ocs.model, com.tstar.crm.model, com.tstar.res.model, com.tstar.ac.model" />    
    </bean>
        
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tstar.portal.dao, com.tstar.ocs.dao, com.tstar.crm.dao, com.tstar.res.dao, com.tstar.ac.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean> 
	
    <!-- 在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean -->
    <context:component-scan base-package="com.tstar.portal, com.tstar.ocs, com.tstar.crm, com.tstar.res, com.tstar.ac, com.tstar.activiti, org.activiti.conf,org.activiti.rest.editor, org.activiti.rest.service">    
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />  
    </context:component-scan>       

    <!--basePackage指定要扫描的包，在此包之下的映射器都会被搜索到。可指定多个包，包与包之间用逗号或分号分隔-->  

    <!-- Activiti begin -->
    <!-- 单例json对象 -->
    <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper"/>

    <!-- 引擎内部提供的UUID生成器，依赖fastxml的java-uuid-generator模块 -->
    <bean id="uuidGenerator" class="org.activiti.engine.impl.persistence.StrongUuidGenerator" />

    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseSchemaUpdate" value="true"/>
        <property name="jobExecutorActivate" value="true"/>
        <property name="dbIdentityUsed" value="false"/>
        <property name="activityFontName" value="宋体"/>
        <property name="labelFontName" value="宋体"/>
    </bean>

    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
    </bean>

    <!-- 7大接口 -->
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
    <!-- Activiti end -->
    
	<!-- 事务 --> 
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:annotation-driven proxy-target-class="true"/>
	
	<!-- 定时器 -->
	<task:annotation-driven scheduler="qbScheduler" mode="proxy"/> 
	<task:scheduler id="qbScheduler" pool-size="10"/>
    
</beans> 